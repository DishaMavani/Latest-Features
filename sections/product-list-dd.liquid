
{% stylesheet %}
  .section-resource-list {
    row-gap: var(--gap);
  }

  .resource-list--carousel-mobile {
    display: block;

    @media screen and (width >= 750px) {
      display: none;
    }
  }

  .resource-list {
    --resource-list-mobile-gap-max: 12px;
    --resource-list-column-gap: min(var(--resource-list-column-gap-desktop), var(--resource-list-mobile-gap-max));
    --resource-list-row-gap: min(var(--resource-list-row-gap-desktop), var(--resource-list-mobile-gap-max));

    width: 100%;

    @media screen and (width >= 750px) {
      --resource-list-column-gap: var(--resource-list-column-gap-desktop);
      --resource-list-row-gap: var(--resource-list-row-gap-desktop);
    }
  }

  .resource-list--grid {
    display: grid;
    column-gap: var(--resource-list-column-gap);
    row-gap: var(--resource-list-row-gap);
    grid-template-columns: var(--resource-list-columns-mobile);

    @media screen and (width >= 750px) {
      grid-template-columns: var(--resource-list-columns);
    }
  }

  .resource-list__item {
    height: 100%;
    color: var(--color-foreground);
    text-decoration: none;
  }

  .section-resource-list__content {
    display: flex;
    flex-direction: column;
    align-items: var(--horizontal-alignment);
    gap: var(--gap);
    width: 100%;
  }

  .section-resource-list__header:empty,
  .section-resource-list__header:has(.group-block-content:empty),
  .section-resource-list__content:empty {
    display: none;
  }
{% endstylesheet %}

{% liquid
  assign max_items = section.settings.max_products

  if section.settings.collection != blank and shop.products_count != 0
    assign section_products = section.settings.collection.products
    assign max_items = section_products.size | at_most: section.settings.max_products
  endif

  case section.settings.layout_type
    when 'grid'
      assign classes = 'resource-list--grid'
      capture styles
        echo '--resource-list-column-gap-desktop: ' | append: section.settings.columns_gap | append: 'px;'
        echo '--resource-list-row-gap-desktop: ' | append: section.settings.rows_gap | append: 'px;'
        echo '--resource-list-columns: repeat(' | append: section.settings.columns | append: ', 1fr);'
        echo '--resource-list-columns-mobile: repeat(' | append: section.settings.mobile_columns | append: ', 1fr);'
      endcapture
    when 'carousel'
      assign classes = 'resource-list__carousel'
      capture styles
        echo '--resource-list-column-gap-desktop: ' | append: section.settings.columns_gap | append: 'px;'
        echo '--column-count: ' | append: section.settings.columns | append: ';'
        echo '--column-count-mobile: ' | append: section.settings.mobile_columns | append: ';'
      endcapture
  endcase
%}

<div data-name="product-list" class="section-background color-{{ section.settings.color_scheme }}"></div>
<div
  class="
    section
    section--{{ section.settings.section_width }}
    color-{{ section.settings.color_scheme }}
    section-resource-list
    spacing-style
    gap-style
    {% if request.design_mode == false and section.settings.collection == blank %}
      in-onboarding-state
    {% endif %}
  "
  style="
    --column-count-mobile: {{ section.settings.mobile_columns }};
    {% render 'spacing-style', settings: section.settings %}
    {% render 'gap-style', value: section.settings.gap %}
    {{ styles }}
  "
>
  <div class="section-resource-list__header">
    {%- content_for 'block', type: '_product-list-content', id: 'static-header' -%}
  </div>

  {% capture list_items %}
    {% for i in (1..max_items) %}
      {% if section_products.size > 0 %}
        {% assign index = forloop.index0 %}
        {% assign product = section_products[index] %}
      {% else %}
        {% assign product = null %}
      {% endif %}
      <div
        class="resource-list__item disha-{{ forloop.index }}"
      >
        {% content_for 'block', type: 'product-card', id: 'static-product-card', closest.product: product %}
      </div>

      {% unless forloop.last %}
        <!--@list/split-->
      {% endunless %}

    {% endfor %}
  {% endcapture %}

  {% liquid
    # Create an array from the list items to be used for different layout types
    assign list_items_array = list_items | strip | split: '<!--@list/split-->'
  %}

  <div
    class="
      resource-list resource-list--{{ section.id }}
      {% if section.settings.layout_type == 'carousel' %}
        force-full-width
      {% endif %}
      {% if section.settings.carousel_on_mobile and section.settings.layout_type != 'carousel' %}
        hidden--mobile
      {% endif %}
      {{ classes }}
    "
    style="{{ styles }}"
    {% if section.settings.layout_type == 'grid' %}
      data-testid="resource-list-grid"
    {% endif %}
  >
    {% case section.settings.layout_type %}
      {% when 'grid' %}
        {{ list_items }}
      {% when 'carousel' %}
        {% render 'resource-list-carousel',
          ref: 'resourceListCarousel',
          slides: list_items_array,
          slide_count: max_items,
          settings: section.settings,
          section_id: section.id
        %}
      {% when 'editorial' %}
        {% render 'editorial-product-grid', items: list_items_array %}
    {% endcase %}
  </div>

  {% if section.settings.carousel_on_mobile and section.settings.layout_type != 'carousel' %}
    {% liquid
      assign mobile_carousel_gap = section.settings.columns_gap
    %}
    <div
      class="
        resource-list resource-list--{{ section.id }}
        hidden--desktop
        force-full-width
      "
      style="
        --resource-list-column-gap-desktop: {{ mobile_carousel_gap }}px;
        --column-count: {{ section.settings.columns }};
      "
    >
      {% render 'resource-list-carousel',
        ref: 'resourceListCarouselMobile',
        slides: list_items_array,
        slide_count: max_items,
        settings: section.settings,
        section_id: section.id
      %}
    </div>
  {% endif %}

  <div
    class="section-resource-list__content"
    style="--horizontal-alignment: {{ section.settings.horizontal_alignment }};"
  >
    {%- content_for 'blocks' -%}
  </div>
</div>

{% schema %}
{
  "name": "product_list DD",
  "class": "ui-test-product-list",
  "blocks": [
    {
      "type": "@theme"
    },
    {
      "type": "@app"
    },
    {
      "type": "_divider"
    }
  ],
  "disabled_on": {
    "groups": ["header", "footer"]
  },
  "settings": [
    {
      "type": "collection",
      "id": "collection",
      "label": "t:settings.collection"
    }
  ],
  "presets": [
    {
      "name": "products_grid DD",
      "category": "t:categories.products",
      "settings": {
        "collection": ""
      },
      "blocks": {
      },
      "block_order": []
    }
  ]
}
{% endschema %}
